#! /usr/bin/env pez

# How many composite integers, n < 10^8, have precisely two, not necessarily
# distinct, prime factors?

# Pretty basic.  Most of the time is spent running a sieve to get a list of
# primes.  After that, for each prime, we multiply it by the primes larger than
# it until one yields a product larger than the limit.

# The prime number sieve was so useful that I pushed it into Pez's standard
# library.

"prime-sieve" load-lib
"bench" load-lib

: default-number
	argc 0= if exit then
	argv @ atoi dup
	0= if drop exit then
	nip ;

10 8 ^ default-number constant upper-limit
upper-limit 2/ biggest!

variable total 0 total !
variable curprime

: count-2multiples ( -- )
	total 1+! # 2^2
	1 begin next-prime dup biggest < while total 1+! repeat drop ;

: count-multiples ( -- )
	curprime @ dup
	begin dup while
		2dup * upper-limit <= if total 1+! else 2drop exit then
		next-prime
	repeat 2drop ;

variable next-time
-1 next-time !
: advance ( -- continue? )
	next-time @ 0= if 0 exit then
	curprime @ next-prime
	dup dup * upper-limit <= if curprime ! -1 else drop 0 then ;

: count-double-composites ( -- )
	count-2multiples
	3 curprime ! count-multiples
	begin advance while count-multiples repeat ;

bench:
	sieve-all
	count-double-composites
	total @ "<%ld>" format print
;bench
