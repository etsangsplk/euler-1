#! /usr/bin/env pez

# Find the first triangle number to have more than 500 divisors.

# We loop from 2 to floor(sqrt(n)), incrementing the variable #d (which starts
# at 1 rather than zero, to count 1) for each divisor we find.  That's half of
# the divisors, so we double it when we hit the end, and this is tau(n).  It's
# faster to use primes, but for the problem at hand, this is more than fast
# enough.

# Note, by the way, that this word doesn't work at all for numbers less than 9
# (doing so is trivial, but this lets us eliminate a test and branch at the
# beginning).  Luckily, we already know that 1, 3, and 6 don't have more than
# 500 divisors, so we don't check those.
variable #d
: #divisors ( n -- tau[n] )
	1 #d !
	dup float sqrt floor 1+ 2 do
		dup i mod 0= if #d 1+! then
	loop drop #d @ 2* ;

variable n
: triangle500 ( -- n )
	5 n !
	10 begin
		n @ dup 1+ n ! +
		dup #divisors 500 <=
	while repeat ;

# Returns the nth triangle number.
: triangle ( n -- t[n] )   dup 1+ * 2/ ;

# This version is faster than the other verson, although not by much.
variable t500
: triangle500' ( -- n )
	0 t500 !
	-1 -1 shift 5 do
		i triangle #divisors
		500 > if i triangle t500 ! leave then
	loop t500 @ ;

ftime triangle500 . cr
ftime fswap f- f. " seconds" puts
ftime triangle500' . cr
ftime fswap f- f. " seconds" puts
